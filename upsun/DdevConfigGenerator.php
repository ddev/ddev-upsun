<?php

/**
 * #ddev-generated by ddev-upsun add-on
 * If you want to edit this file (not recommended) remove the line above.
 * DdevConfigGenerator
 *
 * This script is executed when the Upsun add-on is installed via `ddev add-on get`.
 * It detects and processes Upsun configuration files to generate DDEV equivalents.
 */

declare(strict_types=1);

namespace Upsun;

/**
 * DDEV Configuration Generator
 * 
 * Translates parsed Upsun configuration into equivalent DDEV configuration files.
 */
class DdevConfigGenerator
{
    private UpsunConfigParser $parser;
    private string $projectRoot;
    private string $ddevDir;

    // Upsun PHP version -> DDEV PHP version
    private const PHP_VERSION_MAP = [
        '8.1' => '8.1',
        '8.2' => '8.2', 
        '8.3' => '8.3',
        '8.4' => '8.4'
    ];

    // Upsun database service type -> DDEV database service type
    private const DATABASE_SERVICE_MAP = [
        'mysql' => 'mariadb',        // Upsun 'mysql' means MariaDB
        'mariadb' => 'mariadb',      // Upsun 'mariadb' means MariaDB  
        'oracle-mysql' => 'mysql',   // Upsun 'oracle-mysql' means MySQL
        'postgresql' => 'postgres'   // Upsun 'postgresql' -> DDEV 'postgres'
    ];

    // Upsun database service -> supported versions (Upsun version -> DDEV version)
    private const DATABASE_VERSION_MAP = [
        // Oracle MySQL versions (oracle-mysql service in Upsun -> mysql in DDEV)
        'oracle-mysql' => [
            '5.7' => '5.7',
            '8.0' => '8.0'
        ],
        // MariaDB versions (mysql/mariadb services in Upsun -> mariadb in DDEV)
        'mysql' => [
            '10.6' => '10.6',
            '10.11' => '10.11',
            '11.4' => '11.4',
            '11.8' => '11.8'
        ],
        'mariadb' => [
            '10.6' => '10.6',
            '10.11' => '10.11',
            '11.4' => '11.4',
            '11.8' => '11.8'
        ],
        // PostgreSQL versions (postgresql service in Upsun -> postgres in DDEV)
        'postgresql' => [
            '12' => '12',
            '13' => '13', 
            '14' => '14',
            '15' => '15',
            '16' => '16',
            '17' => '17'
        ]
    ];


    public function __construct(UpsunConfigParser $parser, string $projectRoot)
    {
        $this->parser = $parser;
        $this->projectRoot = rtrim($projectRoot, '/');
        $this->ddevDir = $this->projectRoot . '/.ddev';
        
        if (!is_dir($this->ddevDir)) {
            if (!mkdir($this->ddevDir, 0755, true)) {
                throw new DdevConfigException("Unable to create .ddev directory: {$this->ddevDir}");
            }
        }
    }

    /**
     * Generate DDEV configuration from parsed Upsun configuration
     */
    public function generate(): void
    {
        $this->generateDDEVConfigFromUpsunConfig();
        $this->generateEnvironmentFile();
    }


    /**
     * Generate Upsun-specific configuration file
     */
    private function generateDDEVConfigFromUpsunConfig(): void
    {
        $configFile = $this->ddevDir . '/config.upsun.yaml';
        
        $config = [];


        // Don't override project type - users configure this via `ddev config`
        // Our config.upsun.yaml supplements the main config without changing project type

        $docRoot = $this->parser->getDocumentRoot();
        if ($docRoot) {
            $config['docroot'] = $docRoot;
        }

        $phpVersion = $this->parser->getPhpVersion();
        if ($phpVersion && isset(self::PHP_VERSION_MAP[$phpVersion])) {
            $config['php_version'] = self::PHP_VERSION_MAP[$phpVersion];
        }

        $dbConfig = $this->parser->getDatabaseConfig();
        if ($dbConfig) {
            $service = $dbConfig['service'];
            $version = $dbConfig['version'];

            if (isset(self::DATABASE_SERVICE_MAP[$service])) {
                $config['database'] = [
                    'type' => self::DATABASE_SERVICE_MAP[$service]
                ];

                if (isset(self::DATABASE_VERSION_MAP[$service][$version])) {
                    $config['database']['version'] = self::DATABASE_VERSION_MAP[$service][$version];
                }
            }
        }

        // Add placeholder arrays
        $config['additional_hostnames'] = [];
        $config['additional_fqdns'] = [];

        // Add environment variables
        $envVars = $this->parser->getEnvironmentVariables();
        if (!empty($envVars)) {
            $webEnv = [];
            foreach ($envVars as $key => $value) {
                $webEnv[] = "{$key}={$value}";
            }
            $config['web_environment'] = $webEnv;
        }

        // Add header comments
        $header = "#ddev-generated by ddev-upsun add-on from .upsun/config.yaml\n";
        $header .= "# If you want to edit this file (not recommended) remove the line above.\n\n";
        
        $yaml = yaml_emit($config, YAML_UTF8_ENCODING);
        if ($yaml === false) {
            throw new DdevConfigException("Failed to generate YAML for Upsun config");
        }

        if (file_put_contents($configFile, $header . $yaml) === false) {
            throw new DdevConfigException("Failed to write Upsun config file: {$configFile}");
        }
    }

    /**
     * Generate environment file for Upsun-specific variables
     */
    private function generateEnvironmentFile(): void
    {
        $envFile = $this->ddevDir . '/.env.upsun';
        $envVars = $this->parser->getEnvironmentVariables();
        
        if (empty($envVars)) {
            return;
        }

        $content = "# Generated by DDEV-Upsun add-on\n";
        $content .= "# DO NOT EDIT - This file is automatically managed\n\n";

        foreach ($envVars as $key => $value) {
            $content .= "{$key}={$value}\n";
        }

        if (file_put_contents($envFile, $content) === false) {
            throw new DdevConfigException("Failed to write environment file: {$envFile}");
        }
    }

    /**
     * Get supported PHP versions
     */
    public static function getSupportedPhpVersions(): array
    {
        return array_keys(self::PHP_VERSION_MAP);
    }

    /**
     * Get supported database services  
     */
    public static function getSupportedDatabaseServices(): array
    {
        return array_keys(self::DATABASE_SERVICE_MAP);
    }

    /**
     * Check if a PHP version is supported
     */
    public static function isPhpVersionSupported(string $version): bool
    {
        return isset(self::PHP_VERSION_MAP[$version]);
    }

    /**
     * Check if a database service and version combination is supported
     */
    public static function isDatabaseSupported(string $service, string $version): bool
    {
        return isset(self::DATABASE_SERVICE_MAP[$service]) && 
               isset(self::DATABASE_VERSION_MAP[$service][$version]);
    }
}

/**
 * Custom exception for DDEV configuration generation errors
 */
class DdevConfigException extends \Exception
{
}