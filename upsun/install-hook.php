<?php
/**
 * #ddev-generated
 * DDEV Upsun Add-on Installation Hook
 * 
 * This script is executed when the Upsun add-on is installed via `ddev add-on get`.
 * It detects and processes Upsun configuration files to generate DDEV equivalents.
 */

declare(strict_types=1);

// Set error handling for strict mode
error_reporting(E_ALL);
set_error_handler(function($severity, $message, $file, $line) {
    throw new ErrorException($message, 0, $severity, $file, $line);
});

/**
 * Detect Upsun services and create dynamic dependencies
 */
function detectServicesAndCreateDependencies(string $projectRoot, string $upsunDir): void
{
    // Service type to DDEV add-on mapping
    $serviceToAddon = [
        'elasticsearch' => 'ddev/ddev-elasticsearch',
        'kafka' => 'chx/ddev-kafka',
        'memcached' => 'ddev/ddev-memcached',
        'mongodb' => 'ddev/ddev-mongo',
        'opensearch' => 'ddev/ddev-opensearch',
        'rabbitmq' => 'ddev/ddev-rabbitmq',
        'redis' => 'ddev/ddev-redis',
        'solr' => 'ddev/ddev-solr',
        'varnish' => 'ddev/ddev-varnish'
    ];
    
    $configFile = $upsunDir . '/config.yaml';
    $appFile = $upsunDir . '/.platform.app.yaml';
    $detectedServices = [];
    $serviceVersions = [];
    
    // Check both possible config locations
    foreach ([$configFile, $appFile] as $file) {
        if (file_exists($file)) {
            $content = file_get_contents($file);
            
            // Look for services section
            if (preg_match('/^services:\s*$/m', $content, $matches, PREG_OFFSET_CAPTURE)) {
                $servicesStart = $matches[0][1] + strlen($matches[0][0]);
                $remaining = substr($content, $servicesStart);
                
                // Find service definitions like "servicename:" followed by "type: servicetype:version"
                if (preg_match_all('/^\s*(\w+):\s*$.*?^\s*type:\s*(\w+):([0-9.]+)/ms', $remaining, $serviceMatches, PREG_SET_ORDER)) {
                    foreach ($serviceMatches as $match) {
                        $serviceName = $match[1];
                        $serviceType = $match[2];
                        $version = $match[3];
                        
                        if (isset($serviceToAddon[$serviceType])) {
                            $detectedServices[] = $serviceToAddon[$serviceType];
                            $serviceVersions[$serviceType] = $version;
                            echo "✅ Detected {$serviceType} service '{$serviceName}' (version {$version})\n";
                        }
                    }
                }
            }
            break; // Only process the first file found
        }
    }
    
    // Write detected services to runtime dependencies file
    if (!empty($detectedServices)) {
        $deps = implode("\n", array_unique($detectedServices)) . "\n";
        file_put_contents('./.runtime-deps-upsun', $deps);
        echo "📦 Found " . count(array_unique($detectedServices)) . " service add-on(s) that should be dynamically loaded\n";
        
        // Create environment file for service versions
        if (!empty($serviceVersions)) {
            $envContent = "# Upsun service versions (auto-generated by ddev-upsun)\n";
            $envContent .= "# Use 'ddev dotenv set' to load these variables\n\n";
            foreach ($serviceVersions as $service => $version) {
                $envVar = 'UPSUN_' . strtoupper($service) . '_VERSION';
                $envContent .= "{$envVar}={$version}\n";
            }
            file_put_contents('./.env.upsun-services', $envContent);
            echo "💾 Created .env.upsun-services with version information\n";
            echo "   Use 'ddev dotenv set' commands to load service versions as needed\n";
        }
    } else {
        echo "ℹ️  No supported services detected in .upsun configuration\n";
    }
}

/**
 * Main installation process
 */
function installUpsunAddOn(): void
{
    $projectRoot = realpath('..');
    $ddevDir = $projectRoot . '/.ddev';
    $upsunDir = $projectRoot . '/.upsun';
    
    echo "🔍 Checking for Upsun configuration...\n";
    
    if (!is_dir($upsunDir)) {
        echo "⚠️  No .upsun directory found. Upsun configuration will be processed when available.\n";
        return;
    }
    
    echo "✅ Found .upsun directory, processing configuration...\n";
    
    // First, detect services and create dynamic dependencies
    detectServicesAndCreateDependencies($projectRoot, $upsunDir);
    
    // Load configuration processor and generator
    require_once __DIR__ . '/UpsunConfigParser.php';
    require_once __DIR__ . '/DdevConfigGenerator.php';
    
    $parser = new \Upsun\UpsunConfigParser($projectRoot);
    $parser->parse();
    
    $generator = new \Upsun\DdevConfigGenerator($parser, $projectRoot);
    $generator->generate();
    
    echo "✅ Upsun configuration processed and DDEV files generated!\n";
    echo "💡 Run 'ddev restart' to apply configuration changes.\n";
}

// Execute installation
installUpsunAddOn();